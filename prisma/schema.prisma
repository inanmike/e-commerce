
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Store {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  userId      String
  createAt    DateTime @default(now())
  updatedAt   DateTime @updatedAt
  billboards  Billboard[] @relation("StoreToBillboard")
  categories  Category[] @relation("StoreToCategory")
  colors      Color[] @relation("StoreToColor")
  sizes       Size[] @relation("StoreToSize")
  products    Product[] @relation("StoreToProduct")
  orders      Order[] @relation("StoreToOrder")
}

model Billboard{
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String   @db.ObjectId
  store     Store @relation("StoreToBillboard", fields:[storeId],references: [id])
  label     String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  categories Category[]

  @@index([storeId])
}

model Category{
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String   @db.ObjectId
  store       Store @relation("StoreToCategory", fields:[storeId],references: [id])
  billboardId String @db.ObjectId
  billboard   Billboard @relation(fields:[billboardId],references: [id])
  products    Product[] @relation("CategoryToProduct")
  name        String
  createAt    DateTime @default(now())
  updatedAt   DateTime @updatedAt
  

  @@index([billboardId])
  @@index([storeId])
}

model Color{
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String   @db.ObjectId
  store       Store @relation("StoreToColor", fields:[storeId],references: [id])
  name        String
  value       String
  product     Product[] 
  createAt    DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([storeId])
}

model Size{
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String   @db.ObjectId
  store       Store @relation("StoreToSize", fields:[storeId],references: [id])
  name        String
  value       String
  product     Product[] 
  createAt    DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([storeId])
}

model Product{
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String    @db.ObjectId
  store       Store     @relation("StoreToProduct", fields:[storeId],references: [id])
  categoryId  String    @db.ObjectId
  category    Category  @relation("CategoryToProduct", fields: [categoryId],references: [id])
  name        String
  price       Float
  isFeatured  Boolean
  isArchived  Boolean
  sizeId      String    @db.ObjectId
  size        Size      @relation(fields:[sizeId], references: [id])
  colorId     String    @db.ObjectId
  color       Color     @relation(fields:[colorId], references: [id])
  images      Image[]
  orderItems  OrderItem[]
  createAt    DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])

}

model Image{
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  productId   String    @db.ObjectId
  product     Product   @relation(fields:[productId], references: [id], onDelete: Cascade)
  url         String
  createAt    DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([productId])
}

model Order {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String    @db.ObjectId
  store       Store     @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems  OrderItem[]
  isPaid      Boolean @default(false)
  phone       String @default("")
  address     String @default("")
  createAt    DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}

model OrderItem {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String    @db.ObjectId
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId   String    @db.ObjectId
  product     Product   @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}